/*
 * Created on 2020-06-09 ( Date ISO 2020-06-09 - Time 12:04:00 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.1.2
 */

package org.demo.persistence.impl.jpa;


import java.util.List;

import javax.inject.Named;

import org.demo.data.record.ProvidersRecord; // "Neutral Record" class 
import org.demo.persistence.ProvidersPersistence; // Persistence service interface
import org.demo.persistence.impl.jpa.commons.GenericJpaService;
import org.demo.persistence.impl.jpa.mapping.JpaMapper;
import org.demo.persistence.impl.jpa.mapping.JpaMapping;

import org.demo.persistence.impl.jpa.record.ProvidersJpaRecord; // "JPA Record" class (with JPA mapping) 

/**
 * Providers persistence service - JPA implementation 
 * 
 * @author Telosys 
 *
 */
@Named("ProvidersPersistence")
public class ProvidersPersistenceJpa extends GenericJpaService<ProvidersJpaRecord, Integer> implements ProvidersPersistence {

	private final JpaMapper<ProvidersJpaRecord,ProvidersRecord> mapper = JpaMapping.getMapperProvider().getMapper(ProvidersJpaRecord.class,ProvidersRecord.class);

	/**
	 * Constructor
	 */
	public ProvidersPersistenceJpa() {
		super(ProvidersJpaRecord.class);
	}

	@Override
	public ProvidersRecord findById( Integer id ) {
		ProvidersJpaRecord entity = super.find( id );
		return mapper.mapEntityToRecord(entity);	
	}

	@Override
	public List<ProvidersRecord> findAll() {
		List<ProvidersJpaRecord> entities = super.loadAll() ;
		List<ProvidersRecord> records = new java.util.LinkedList<ProvidersRecord>();
		for ( ProvidersJpaRecord entity : entities ) {
			records.add( mapper.mapEntityToRecord(entity) ) ;
		}
		return records ;
	}

	@Override
	public ProvidersRecord create(ProvidersRecord record) {
		ProvidersJpaRecord entity = mapper.mapRecordToEntity(record);
		super.persist(entity);
		return record ;
	}
	
	@Override
	public boolean update(ProvidersRecord record) {
		Integer pk = record.getId() ;
		if ( super.find( pk ) != null ) {
			// Exists => 'merge' 
			ProvidersJpaRecord entity = mapper.mapRecordToEntity(record);
			super.merge(entity);
			return true ;
		}
		else {
			return false;
		}
	}

	@Override
	public ProvidersRecord save(ProvidersRecord record) {
		ProvidersJpaRecord entity = mapper.mapRecordToEntity(record);
		super.merge(entity);
		return record ;
	}

	@Override
	public boolean deleteById( Integer id ) {
		return super.remove( id );
	}

	@Override
	public boolean delete(ProvidersRecord record) {
		if ( record != null ) {
			return super.remove( record.getId() );
		}
		return false ;
	}

	@Override
	public long countAll() {
		Long count = (Long) super.execNamedQueryWithSingleResult( buildQueryName("countAll") ) ;
		return count.longValue();
	}

	public long countById(Integer id) {
		Long count = (Long) super.execNamedQueryWithSingleResult( buildQueryName("countById"), id ) ;
		return count.longValue();
	}
	
	@Override
	public boolean exists(Integer id) {
		long count = countById(id) ;
		return count > 0 ;
	}


	@Override
	public boolean exists(ProvidersRecord record) {
		if ( record != null ) {
			return exists( record.getId() );
		}
		return false ;
	}

	@SuppressWarnings("unchecked")
	public List<ProvidersJpaRecord> queryExample() {
		List<?> list = super.execNamedQuery(buildQueryName("theNamedQueryToBeUsed")) ;
		return (List<ProvidersJpaRecord>) list ;
	}

}

/*
 * Created on 2020-06-09 ( Date ISO 2020-06-09 - Time 11:53:29 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.1.2
 */
package org.demo.persistence.impl.springdatajpa.service;

import java.util.List;
import java.util.Optional;

import org.demo.data.record.ProviderxjobRecord;
import org.demo.persistence.ProviderxjobPersistence;
import org.demo.persistence.impl.jpa.record.ProviderxjobJpaRecord;
import org.demo.persistence.impl.springdatajpa.repository.ProviderxjobRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.demo.persistence.impl.jpa.mapping.JpaMapper;
import org.demo.persistence.impl.jpa.mapping.JpaMapping;

/**
 * Spring persistence service for "Providerxjob" <br>
 * @author Telosys (http://www.telosys.org/) version 3.1.2
 */
@Service
@Transactional
public class ProviderxjobPersistenceService implements ProviderxjobPersistence {

	@Autowired
	private ProviderxjobRepository providerxjobRepository;
	//@Autowired
	//private ProviderxjobMapper providerxjobMapper;
	private final JpaMapper<ProviderxjobJpaRecord,ProviderxjobRecord> mapper = JpaMapping.getMapperProvider().getMapper(ProviderxjobJpaRecord.class,ProviderxjobRecord.class);


	@Override
	public ProviderxjobRecord findById(Integer id) {

		Optional<ProviderxjobJpaRecord> optionalEntity = providerxjobRepository.findById(id);
		if ( optionalEntity.isPresent() ) {
			return mapper.mapEntityToRecord(optionalEntity.get());
		}
		return null ;

	}

	@Override
	public List<ProviderxjobRecord> findAll() {
		//return mapper.mapEntityToRecord(providerxjobRepository.findAll());

		List<ProviderxjobJpaRecord> entities = providerxjobRepository.findAll() ;
		List<ProviderxjobRecord> records = new java.util.LinkedList<ProviderxjobRecord>();
		for ( ProviderxjobJpaRecord entity : entities ) {
			records.add( mapper.mapEntityToRecord(entity) ) ;
		}
		return records ;

	}

	@Override
	public long countAll() {
		return providerxjobRepository.count();
	}

	@Override
	public ProviderxjobRecord save(ProviderxjobRecord record) {
//		return mapper.map(providerxjobRepository.save(mapper.map(record)));
		ProviderxjobJpaRecord saved = providerxjobRepository.save( mapper.mapRecordToEntity(record) );
		return mapper.mapEntityToRecord(saved);

	}

	@Override
	public boolean update(ProviderxjobRecord record) {

		if ( exists(record) ) {
			providerxjobRepository.save(mapper.mapRecordToEntity(record));
			return true;
		}
		return false;
	}

	@Override
	public ProviderxjobRecord create(ProviderxjobRecord record) {
		ProviderxjobJpaRecord saved = providerxjobRepository.save( mapper.mapRecordToEntity(record) );
		return mapper.mapEntityToRecord(saved);

	}

	@Override
	public boolean deleteById(Integer id) {
		final Optional<ProviderxjobJpaRecord> optinalEntity = providerxjobRepository.findById(id);
		if( ! optinalEntity.isPresent() ) {
			return false;
		}

		else {
			providerxjobRepository.delete(optinalEntity.get());
			return true;
		}
	}

	@Override
	public boolean delete(ProviderxjobRecord record) {
		if(record == null) {
			return false;
		}
		return deleteById( record.getId() );

	}

	@Override
	public boolean exists(Integer id) {
		return providerxjobRepository.findById(id).isPresent();
	}

	@Override
	public boolean exists(ProviderxjobRecord record) {
		return record == null ? false : providerxjobRepository.findById(record.getId()).isPresent();
	}

}

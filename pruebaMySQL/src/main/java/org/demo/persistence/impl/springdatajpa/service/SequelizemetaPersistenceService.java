/*
 * Created on 2020-06-09 ( Date ISO 2020-06-09 - Time 11:53:29 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.1.2
 */
package org.demo.persistence.impl.springdatajpa.service;

import java.util.List;
import java.util.Optional;

import org.demo.data.record.SequelizemetaRecord;
import org.demo.persistence.SequelizemetaPersistence;
import org.demo.persistence.impl.jpa.record.SequelizemetaJpaRecord;
import org.demo.persistence.impl.springdatajpa.repository.SequelizemetaRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.demo.persistence.impl.jpa.mapping.JpaMapper;
import org.demo.persistence.impl.jpa.mapping.JpaMapping;

/**
 * Spring persistence service for "Sequelizemeta" <br>
 * @author Telosys (http://www.telosys.org/) version 3.1.2
 */
@Service
@Transactional
public class SequelizemetaPersistenceService implements SequelizemetaPersistence {

	@Autowired
	private SequelizemetaRepository sequelizemetaRepository;
	//@Autowired
	//private SequelizemetaMapper sequelizemetaMapper;
	private final JpaMapper<SequelizemetaJpaRecord,SequelizemetaRecord> mapper = JpaMapping.getMapperProvider().getMapper(SequelizemetaJpaRecord.class,SequelizemetaRecord.class);


	@Override
	public SequelizemetaRecord findById(String name) {

		Optional<SequelizemetaJpaRecord> optionalEntity = sequelizemetaRepository.findById(name);
		if ( optionalEntity.isPresent() ) {
			return mapper.mapEntityToRecord(optionalEntity.get());
		}
		return null ;

	}

	@Override
	public List<SequelizemetaRecord> findAll() {
		//return mapper.mapEntityToRecord(sequelizemetaRepository.findAll());

		List<SequelizemetaJpaRecord> entities = sequelizemetaRepository.findAll() ;
		List<SequelizemetaRecord> records = new java.util.LinkedList<SequelizemetaRecord>();
		for ( SequelizemetaJpaRecord entity : entities ) {
			records.add( mapper.mapEntityToRecord(entity) ) ;
		}
		return records ;

	}

	@Override
	public long countAll() {
		return sequelizemetaRepository.count();
	}

	@Override
	public SequelizemetaRecord save(SequelizemetaRecord record) {
//		return mapper.map(sequelizemetaRepository.save(mapper.map(record)));
		SequelizemetaJpaRecord saved = sequelizemetaRepository.save( mapper.mapRecordToEntity(record) );
		return mapper.mapEntityToRecord(saved);

	}

	@Override
	public boolean update(SequelizemetaRecord record) {

		if ( exists(record) ) {
			sequelizemetaRepository.save(mapper.mapRecordToEntity(record));
			return true;
		}
		return false;
	}

	@Override
	public SequelizemetaRecord create(SequelizemetaRecord record) {
		SequelizemetaJpaRecord saved = sequelizemetaRepository.save( mapper.mapRecordToEntity(record) );
		return mapper.mapEntityToRecord(saved);

	}

	@Override
	public boolean deleteById(String name) {
		final Optional<SequelizemetaJpaRecord> optinalEntity = sequelizemetaRepository.findById(name);
		if( ! optinalEntity.isPresent() ) {
			return false;
		}

		else {
			sequelizemetaRepository.delete(optinalEntity.get());
			return true;
		}
	}

	@Override
	public boolean delete(SequelizemetaRecord record) {
		if(record == null) {
			return false;
		}
		return deleteById( record.getName() );

	}

	@Override
	public boolean exists(String name) {
		return sequelizemetaRepository.findById(name).isPresent();
	}

	@Override
	public boolean exists(SequelizemetaRecord record) {
		return record == null ? false : sequelizemetaRepository.findById(record.getName()).isPresent();
	}

}

// File generated by Telosys Tools Generator ( version 3.1.2 ) - Date 2020-06-09 ( Time 12:14:13 )

// Modules imports
import { NotificationService } from './../../../services/notification.service';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { MdDialog } from '@angular/material';
import { ActivatedRoute, Router } from '@angular/router';
import { Component, OnInit } from '@angular/core';

// Components imports
import { DeleteDialogComponent } from './../../../delete-dialog/delete-dialog.component';

// Models and services imports
import { Providers } from './../providers.model';
import { ProvidersService } from './../services/providers.service';
import { Users } from './../../users/users.model';
import { UsersService } from './../../users/services/users.service';
import * as _ from 'underscore';

@Component({
  selector: 'app-providers-form',
  templateUrl: './providers-form.component.html',
  styleUrls: ['./providers-form.component.css']
})
export class ProvidersFormComponent implements OnInit {

  // HTTP status code
  readonly NOT_FOUND_ERROR = 404;
  readonly CONFLICT_ERROR = 409;
  readonly INTERNAL_SERVER_ERROR = 500;

  private title = 'Providers Form';
  private providers: Providers;
  private form: FormGroup;
  private ids;

  // Users Select
  private userssData: Users[];
  private selectedUsersId: number;

  constructor(
    private _usersService: UsersService,
    private _providersService: ProvidersService,
    private _route: ActivatedRoute,
    private _router: Router,
    private _formBuilder: FormBuilder,
    private _notificationService: NotificationService,
    public dialog: MdDialog) { }

  ngOnInit() {
    this.getIdFromRouteParams();
    this.fetchUserss();
    this.initForm();
  }

  getIdFromRouteParams = () => {
    this._route.params.subscribe(p => {
        this.ids = _.values(p);
    });
  }

  fetchUserss = () => {
    this._usersService.getAll().subscribe(
      (data: Users[]) => this.userssData = data,
      error => console.error(error));
  }

  initForm = () => {
    this.form = this._formBuilder.group(this.getNewForm());
    if (!_.isEmpty(this.ids)) {
      this.load();
    }
  }

  getNewForm = (providers?: Providers) => {
    return {
      id: [
          (providers ? providers.id : ''),
          Validators.required
      ],
      userid: [
        (providers ? providers.userid : ''),
        Validators.required
      ],
      phone: [
        (providers ? providers.phone : ''),
        Validators.required
      ],
      description: [
        (providers ? providers.description : ''),
        Validators.required
      ],
      address: [
        (providers ? providers.address : ''),
        Validators.required
      ],
      createdat: [
        (providers ? providers.createdat : ''),
        Validators.required
      ],
      updatedat: [
        (providers ? providers.updatedat : ''),
        Validators.required
      ]
    };
  }


  load = () => {
    this._providersService.getSingle(this.ids).subscribe(
      (providers: Providers) => {
        this.providers = {
          id: providers.id,
          userid: providers.userid,
          phone: providers.phone,
          description: providers.description,
          address: providers.address,
          createdat: providers.createdat,
          updatedat: providers.updatedat
		};
        this.form = this._formBuilder.group(this.getNewForm(this.providers));
      },
      error => {
        if (error.status === this.NOT_FOUND_ERROR) {
          this._notificationService.error(error.statusText, 'Entity not found in database');
        } else if (error.status === this.INTERNAL_SERVER_ERROR) {
          this._notificationService.error(error.statusText, error.json());
        } else {
          this._notificationService.error('Error', 'An error occured when trying to reach the server');
        }
      });
  }

  save = () => {
	// If we didn't get a providers, we are adding a providers
    if (!this.providers) {
      this.add();
    } else { // If we didn't get a providers, we are adding a providers
      this.update();
    }
  }

  add = () => {
    this._providersService.add(this.form.value).subscribe(
      result => {
        this._notificationService.success('Success', 'Providers added successfuly');
        this._router.navigate(['./providers-form', this.form.value.id]);
      },
      error => {1
        if (error.status === this.CONFLICT_ERROR) {
          this._notificationService.error(error.statusText, 'Id already used in database');
        } else if (error.status === this.INTERNAL_SERVER_ERROR) {
          this._notificationService.error(error.statusText, error.json());
        } else {
          this._notificationService.error('Error', 'An error occured when trying to reach the server');
        }
      });
  }

  update = () => {
    this._providersService.update(<Providers>this.form.getRawValue(), this.ids).subscribe(
      result => this._notificationService.success('Success', 'Providers edited successfuly'),
      error => {
        if (error.status === this.NOT_FOUND_ERROR) {
          this._notificationService.error(error.statusText, 'Entity not found in database');
        } else if (error.status === this.INTERNAL_SERVER_ERROR) {
          this._notificationService.error(error.statusText, error.json());
        } else {
          this._notificationService.error('Error', 'An error occured when trying to reach the server');
        }
      });
  }

  deleteConfirmation = () => {
    if (this.providers.id) {
      const dialogRef = this.dialog.open(DeleteDialogComponent, {
        data: `providers: ${this.providers.id}`
      });
      dialogRef.afterClosed().subscribe(result => {
        if (result) {
          this.deleteBadge(this.providers.id);
        }
      });
    }
  }

  deleteBadge = (id): void => {
    // Call delete service
    this._providersService.delete(id).subscribe(
      result => {
        this._router.navigate(['./providers-list']);

        this._notificationService.success(
          'Deleted',
          `The providers entry with the id(s)='${id}' was deleted successfuly`);
      },
      error => {
        if (error.status === this.NOT_FOUND_ERROR) {
          this._notificationService.error(error.statusText, 'Entity not found in database');
        } else if (error.status === this.INTERNAL_SERVER_ERROR) {
          this._notificationService.error(error.statusText, error.json());
        } else {
          this._notificationService.error('Error', 'An error occured when trying to reach the server');
        }
      });
  }
}

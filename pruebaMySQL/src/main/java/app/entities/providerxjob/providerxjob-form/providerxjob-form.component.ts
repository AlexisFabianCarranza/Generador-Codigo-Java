// File generated by Telosys Tools Generator ( version 3.1.2 ) - Date 2020-06-09 ( Time 12:14:13 )

// Modules imports
import { NotificationService } from './../../../services/notification.service';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { MdDialog } from '@angular/material';
import { ActivatedRoute, Router } from '@angular/router';
import { Component, OnInit } from '@angular/core';

// Components imports
import { DeleteDialogComponent } from './../../../delete-dialog/delete-dialog.component';

// Models and services imports
import { Providerxjob } from './../providerxjob.model';
import { ProviderxjobService } from './../services/providerxjob.service';
import { Providers } from './../../providers/providers.model';
import { ProvidersService } from './../../providers/services/providers.service';
import { Jobs } from './../../jobs/jobs.model';
import { JobsService } from './../../jobs/services/jobs.service';
import * as _ from 'underscore';

@Component({
  selector: 'app-providerxjob-form',
  templateUrl: './providerxjob-form.component.html',
  styleUrls: ['./providerxjob-form.component.css']
})
export class ProviderxjobFormComponent implements OnInit {

  // HTTP status code
  readonly NOT_FOUND_ERROR = 404;
  readonly CONFLICT_ERROR = 409;
  readonly INTERNAL_SERVER_ERROR = 500;

  private title = 'Providerxjob Form';
  private providerxjob: Providerxjob;
  private form: FormGroup;
  private ids;

  // Providers Select
  private providerssData: Providers[];
  private selectedProvidersId: number;

  // Jobs Select
  private jobssData: Jobs[];
  private selectedJobsId: number;

  constructor(
    private _providersService: ProvidersService,
    private _jobsService: JobsService,
    private _providerxjobService: ProviderxjobService,
    private _route: ActivatedRoute,
    private _router: Router,
    private _formBuilder: FormBuilder,
    private _notificationService: NotificationService,
    public dialog: MdDialog) { }

  ngOnInit() {
    this.getIdFromRouteParams();
    this.fetchProviderss();
    this.fetchJobss();
    this.initForm();
  }

  getIdFromRouteParams = () => {
    this._route.params.subscribe(p => {
        this.ids = _.values(p);
    });
  }

  fetchProviderss = () => {
    this._providersService.getAll().subscribe(
      (data: Providers[]) => this.providerssData = data,
      error => console.error(error));
  }

  fetchJobss = () => {
    this._jobsService.getAll().subscribe(
      (data: Jobs[]) => this.jobssData = data,
      error => console.error(error));
  }

  initForm = () => {
    this.form = this._formBuilder.group(this.getNewForm());
    if (!_.isEmpty(this.ids)) {
      this.load();
    }
  }

  getNewForm = (providerxjob?: Providerxjob) => {
    return {
      id: [
          (providerxjob ? providerxjob.id : ''),
          Validators.required
      ],
      providerid: [
        (providerxjob ? providerxjob.providerid : ''),
        Validators.required
      ],
      jobid: [
        (providerxjob ? providerxjob.jobid : ''),
        Validators.required
      ]
    };
  }


  load = () => {
    this._providerxjobService.getSingle(this.ids).subscribe(
      (providerxjob: Providerxjob) => {
        this.providerxjob = {
          id: providerxjob.id,
          providerid: providerxjob.providerid,
          jobid: providerxjob.jobid
		};
        this.form = this._formBuilder.group(this.getNewForm(this.providerxjob));
      },
      error => {
        if (error.status === this.NOT_FOUND_ERROR) {
          this._notificationService.error(error.statusText, 'Entity not found in database');
        } else if (error.status === this.INTERNAL_SERVER_ERROR) {
          this._notificationService.error(error.statusText, error.json());
        } else {
          this._notificationService.error('Error', 'An error occured when trying to reach the server');
        }
      });
  }

  save = () => {
	// If we didn't get a providerxjob, we are adding a providerxjob
    if (!this.providerxjob) {
      this.add();
    } else { // If we didn't get a providerxjob, we are adding a providerxjob
      this.update();
    }
  }

  add = () => {
    this._providerxjobService.add(this.form.value).subscribe(
      result => {
        this._notificationService.success('Success', 'Providerxjob added successfuly');
        this._router.navigate(['./providerxjob-form', this.form.value.id]);
      },
      error => {1
        if (error.status === this.CONFLICT_ERROR) {
          this._notificationService.error(error.statusText, 'Id already used in database');
        } else if (error.status === this.INTERNAL_SERVER_ERROR) {
          this._notificationService.error(error.statusText, error.json());
        } else {
          this._notificationService.error('Error', 'An error occured when trying to reach the server');
        }
      });
  }

  update = () => {
    this._providerxjobService.update(<Providerxjob>this.form.getRawValue(), this.ids).subscribe(
      result => this._notificationService.success('Success', 'Providerxjob edited successfuly'),
      error => {
        if (error.status === this.NOT_FOUND_ERROR) {
          this._notificationService.error(error.statusText, 'Entity not found in database');
        } else if (error.status === this.INTERNAL_SERVER_ERROR) {
          this._notificationService.error(error.statusText, error.json());
        } else {
          this._notificationService.error('Error', 'An error occured when trying to reach the server');
        }
      });
  }

  deleteConfirmation = () => {
    if (this.providerxjob.id) {
      const dialogRef = this.dialog.open(DeleteDialogComponent, {
        data: `providerxjob: ${this.providerxjob.id}`
      });
      dialogRef.afterClosed().subscribe(result => {
        if (result) {
          this.deleteBadge(this.providerxjob.id);
        }
      });
    }
  }

  deleteBadge = (id): void => {
    // Call delete service
    this._providerxjobService.delete(id).subscribe(
      result => {
        this._router.navigate(['./providerxjob-list']);

        this._notificationService.success(
          'Deleted',
          `The providerxjob entry with the id(s)='${id}' was deleted successfuly`);
      },
      error => {
        if (error.status === this.NOT_FOUND_ERROR) {
          this._notificationService.error(error.statusText, 'Entity not found in database');
        } else if (error.status === this.INTERNAL_SERVER_ERROR) {
          this._notificationService.error(error.statusText, error.json());
        } else {
          this._notificationService.error('Error', 'An error occured when trying to reach the server');
        }
      });
  }
}

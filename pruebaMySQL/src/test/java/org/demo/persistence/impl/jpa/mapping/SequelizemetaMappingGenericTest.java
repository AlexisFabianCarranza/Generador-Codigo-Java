/*
 * Created on 2020-06-09 ( Date ISO 2020-06-09 - Time 12:21:09 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.1.2
 */
package org.demo.persistence.impl.jpa.mapping;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;

import org.demo.data.record.SequelizemetaRecord;
import org.demo.persistence.impl.jpa.record.SequelizemetaJpaRecord ;

/**
 * Generic tests for Sequelizemeta mapping
 *
 */
public abstract class SequelizemetaMappingGenericTest {

	protected void setMapperProvider(JpaMapperProvider provider) {
		JpaMapping.setMapperProvider(provider);
		System.out.println("Mapper provider set to : " + provider.getClass().getCanonicalName() );
	}
	
	protected void processAllTest() {
		testPojoMapping();
		testEntityMapping();
	}
	
	private SequelizemetaJpaRecord buildJpaRecord() {
		SequelizemetaJpaRecord entity = new SequelizemetaJpaRecord();
		entity.setName("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"); 
		return entity ;
	}
	
	private SequelizemetaRecord buildRecord() {
		SequelizemetaRecord pojo = new SequelizemetaRecord();
		pojo.setName("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"); 
		return pojo ;
	}

	private void checkValues(SequelizemetaRecord r1, SequelizemetaRecord r2) {
		assertTrue(r1 != r2); // different instances
		assertEquals(r1.getName(), r2.getName());
	}

	private void checkValues(SequelizemetaJpaRecord r1, SequelizemetaJpaRecord r2) {
		assertTrue(r1 != r2); // different instances
		assertEquals(r1.getName(), r2.getName());
	}
	
	protected void testPojoMapping() {
		System.out.println("Test POJO mapping" );
    	JpaMapper<SequelizemetaJpaRecord,SequelizemetaRecord> mapper = JpaMapping.getMapperProvider().getMapper(SequelizemetaJpaRecord.class, SequelizemetaRecord.class);
    	SequelizemetaRecord pojo1 = buildRecord();
    	SequelizemetaJpaRecord entity = mapper.mapRecordToEntity(pojo1);
    	SequelizemetaRecord pojo2 = mapper.mapEntityToRecord(entity);
    	checkValues(pojo1, pojo2);
    	// Test null 
    	assertNull(mapper.mapRecordToEntity(null));
	}
	
	protected void testEntityMapping() {
		System.out.println("Test ENTITY mapping" );
    	JpaMapper<SequelizemetaJpaRecord,SequelizemetaRecord> mapper = JpaMapping.getMapperProvider().getMapper(SequelizemetaJpaRecord.class, SequelizemetaRecord.class);
		SequelizemetaJpaRecord entity1 = buildJpaRecord();
		SequelizemetaRecord pojo = mapper.mapEntityToRecord(entity1);
		SequelizemetaJpaRecord entity2 = mapper.mapRecordToEntity(pojo);
    	checkValues(entity1, entity2);
    	// Test null 
    	assertNull(mapper.mapEntityToRecord(null));
	}
	
}
